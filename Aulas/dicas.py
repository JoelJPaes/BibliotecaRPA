
# ### **`if`**
# - **Finalidade**: Verifica uma condi√ß√£o √∫nica.
# - **Quando usar**: Quando precisa executar algo se uma condi√ß√£o for verdadeira.
# - **Exemplo**:
#   ```python
#   idade = 18
#   if idade >= 18:
#       print("Maior de idade")
#   ```
# - **Observa√ß√µes**:
#   - A condi√ß√£o no `if` deve sempre resultar em `True` ou `False`.
#   - Use operadores l√≥gicos (`and`, `or`, `not`) para combinar condi√ß√µes.

# ---

# ### **`else`**
# - **Finalidade**: Executa um bloco de c√≥digo caso a condi√ß√£o do `if` seja falsa.
# - **Quando usar**: Para definir uma alternativa ao `if`.
# - **Exemplo**:
#   ```python
#   idade = 16
#   if idade >= 18:
#       print("Maior de idade")
#   else:
#       print("Menor de idade")
#   ```
# - **Observa√ß√µes**:
#   - O `else` √© opcional. O c√≥digo funcionar√° sem ele, mas sem uma alternativa.
#   - Certifique-se de que o `else` esteja alinhado com o `if` correto.

# ---

# ### **`elif`**
# - **Finalidade**: Verifica m√∫ltiplas condi√ß√µes.
# - **Quando usar**: Quando precisa checar v√°rias condi√ß√µes em sequ√™ncia.
# - **Exemplo**:
#   ```python
#   nota = 6
#   if nota >= 7:
#       print("Aprovado")
#   elif nota >= 5:
#       print("Recupera√ß√£o")
#   else:
#       print("Reprovado")
#   ```
# - **Observa√ß√µes**:
#   - Use `elif` para evitar m√∫ltiplos `if` independentes que verificam as mesmas vari√°veis.
#   - O `elif` s√≥ ser√° executado se as condi√ß√µes anteriores forem falsas.

# ---

# ### **`while`**
# - **Finalidade**: Repeti√ß√£o baseada em condi√ß√£o.
# - **Quando usar**: Quando precisa repetir algo enquanto uma condi√ß√£o for verdadeira.
# - **Exemplo**:
#   ```python
#   numero = 5
#   while numero > 0:
#       print(numero)
#       numero -= 1
#   ```
# - **Observa√ß√µes**:
#   - Tome cuidado para evitar **loops infinitos**. Garanta que a condi√ß√£o eventualmente se torne falsa.
#   - Use `break` para sair do loop quando necess√°rio.

# ---

# ### **`for`**
# - **Finalidade**: Itera sobre uma sequ√™ncia ou intervalo.
# - **Quando usar**: Quando sabe quantas vezes precisa repetir ou para iterar em listas, tuplas, etc.
# - **Exemplo**:
#   ```python
#   lista = ["Ana", "Jo√£o", "Maria"]
#   for nome in lista:
#       print(f"Ol√°, {nome}!")
#   ```
# - **Observa√ß√µes**:
#   - O `for` funciona bem com objetos iter√°veis como listas, strings, dicion√°rios, etc.
#   - Use `enumerate` para obter o √≠ndice junto com o elemento:
#     ```python
#     for i, nome in enumerate(lista):
#         print(f"√çndice {i}: {nome}")
#     ```

# ---

# ### **`break`**
# - **Finalidade**: Interrompe o loop imediatamente.
# - **Quando usar**: Para sair de um loop antes que ele termine.
# - **Exemplo**:
#   ```python
#   for numero in range(10):
#       if numero == 5:
#           break
#       print(numero)
#   ```
# - **Observa√ß√µes**:
#   - O `break` funciona em ambos os loops `for` e `while`.
#   - Use com cuidado, pois pode dificultar o entendimento da l√≥gica do loop.

# ---

# ### **`continue`**
# - **Finalidade**: Pula para a pr√≥xima itera√ß√£o do loop.
# - **Quando usar**: Para ignorar o restante do c√≥digo na itera√ß√£o atual.
# - **Exemplo**:
#   ```python
#   for numero in range(5):
#       if numero == 2:
#           continue
#       print(numero)
#   ```
# - **Observa√ß√µes**:
#   - Evite usar `continue` em loops muito complexos, pois pode dificultar a leitura do c√≥digo.

# ---

# ### **`pass`**
# - **Finalidade**: Placeholder vazio.
# - **Quando usar**: Quando precisa de um bloco de c√≥digo vazio.
# - **Exemplo**:
#   ```python
#   if True:
#       pass
#   ```
# - **Observa√ß√µes**:
#   - O `pass` √© √∫til em situa√ß√µes onde o c√≥digo ser√° implementado posteriormente.
#   - N√£o faz nada al√©m de evitar erros de sintaxe.

# ---

# ### **`try` / `except`**
# - **Finalidade**: Captura e lida com exce√ß√µes.
# - **Quando usar**: Quando espera que algo possa gerar um erro.
# - **Exemplo**:
#   ```python
#   try:
#       resultado = 10 / 0
#   except ZeroDivisionError:
#       print("Erro: divis√£o por zero.")
#   ```
# - **Observa√ß√µes**:
#   - Sempre use exce√ß√µes espec√≠ficas como `ZeroDivisionError` para capturar erros previs√≠veis.
#   - Evite capturar exce√ß√µes gen√©ricas como `except Exception`, pois pode mascarar erros inesperados.

# ---

# ### **finally**
# - **Finalidade**: Executa c√≥digo independentemente de erros.
# - **Quando usar**: Para a√ß√µes de limpeza, como fechar arquivos ou liberar recursos.
# - **Exemplo**:
#   ```python
#   try:
#       resultado = 10 / 0
#   except ZeroDivisionError:
#       print("Erro.")
#   finally:
#       print("Fim do programa.")
#   ```
# - **Observa√ß√µes**:
#   - O `finally` √© sempre executado, mesmo que haja um `return` no bloco `try` ou `except`.

# ---

# ### **`lambda`**
# - **Finalidade**: Cria fun√ß√µes pequenas e an√¥nimas.
# - **Quando usar**: Para opera√ß√µes simples, como em fun√ß√µes de ordem superior.
# - **Exemplo**:
#   ```python
#   dobro = lambda x: x * 2
#   print(dobro(4))
#   ```
# - **Observa√ß√µes**:
#   - Use lambdas apenas para l√≥gica simples. Fun√ß√µes regulares s√£o mais leg√≠veis em casos complexos.

# ---

# ### **`with`**
# - **Finalidade**: Gerencia contextos automaticamente, como arquivos.
# - **Quando usar**: Para garantir que arquivos sejam fechados corretamente.
# - **Exemplo**:
#   ```python
#   with open("arquivo.txt", "w") as arquivo:
#       arquivo.write("Ol√°, Mundo!")
#   ```
# - **Observa√ß√µes**:
#   - O `with` evita que voc√™ esque√ßa de fechar arquivos, mesmo que ocorra um erro.

# ---

# ### **`yield`**
# - **Finalidade**: Pausa uma fun√ß√£o e retorna um valor tempor√°rio.
# - **Quando usar**: Para criar geradores que produzem valores sob demanda.
# - **Exemplo**:
#   ```python
#   def contador():
#       for i in range(3):
#           yield i

#   for numero in contador():
#       print(numero)
#   ```
# - **Observa√ß√µes**:
#   - O `yield` permite criar fun√ß√µes que economizam mem√≥ria ao gerar valores um por um.

# ---

# Essas observa√ß√µes ajudam a evitar erros e a usar cada comando de forma mais eficiente. Se quiser mais detalhes, √© s√≥ avisar! üòä